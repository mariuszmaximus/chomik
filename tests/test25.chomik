#!/usr/local/bin/chomik

type some_range = 1..3, another_range = 1..2;
expand(1);

variable minimum (X:some_range) and (Y:another_range):integer;

let minimum 1 and 1=value integer 10;
let minimum 2 and 1=value integer 14;
let minimum 3 and 1=value integer 12;
let minimum 1 and 2=value integer 0;
let minimum 2 and 2=value integer 3;
let minimum 3 and 2=value integer 4;
let minimum 1 and 3=value integer 0;
let minimum 2 and 3=value integer 0;
let minimum 3 and 3=value integer 0;

variable maximum (X:some_range) and (Y:another_range):integer;
let maximum 1 and 1=value integer 15;
let maximum 2 and 1=value integer 17;
let maximum 3 and 1=value integer 18;
let maximum 1 and 2=value integer 10;
let maximum 2 and 2=value integer 7;
let maximum 3 and 2=value integer 9;
let maximum 1 and 3=value integer 0;
let maximum 2 and 3=value integer 0;
let maximum 3 and 3=value integer 0;

variable amount of iterations : integer;
let amount of iterations = value integer 0;

variable run test (X:some_range) and (Y:another_range) generates (Z:<minimum (X:some_range) and (Y:another_range)>..<maximum (X:some_range) and (Y:another_range)>):code;

let run test (X:some_range) and (Y:another_range) generates (Z:<minimum (X:some_range) and (Y:another_range)>..<maximum (X:some_range) and (Y:another_range)>)=value code
{
    <print "test" (X:some_range) "and" (Y:another_range)>;

    <add "integer" <amount of iterations> 1>;
    let amount of iterations = <the add result "integer">;
};


# Alltogether we should do 39 iterations.
#
<run test (X:some_range) and (Y:another_range) generates (Z:<minimum (X:some_range) and (Y:another_range)>..<maximum (X:some_range) and (Y:another_range)>)>;

<print "amount of iterations" <amount of iterations>>;

variable on (X:compare_result) set the program return:code;
let on lower set the program return = value code { let the program return = value integer 1; <print "error!">; };
let on greater set the program return = value code { let the program return = value integer 1; <print "error!">; };
let on equal set the program return = value code { let the program return = value integer 0; };

<compare "integer" <amount of iterations> 39>;
<on <the compare result> set the program return>;

