

#
# Here we demonstrate how to use the random number generator for enum types.
# This is a special "stream" designed for reading random identifiers from enum types that are then stored in predefined variables.
# For each enum type there is a corresponding variable, for example for 'person' there is a variable 'the read from stream result "person"'.
# These variables are created automatically when the types are expanded.

type person = { I, Gotrek, Gerrudir, Gwaigilion };
type item = { sword, axe, bow }; 
type place = { Gotreks_hut, Gerrudirs_hut, Gwaigilions_hut };
type action = { talk_with_(X:person), end_conversation, tell_(X:person)_(Y:information), ask_(X:person)_whether_(Y:information), go_to_(X:place), ask_(X:person)_to_(Y:action) };
type information = { (X:person)_is_in_(Y:place), (X:person)_can_see_(Y:person), (X:person)_has_(Y:item), (X:person)_can_see_(Y:information)_is_(Z:boolean),
                    (X:person)_has_heard_(Y:information), (X:person)_has_asked_(Y:person)_to_(Z:action) };
type my_range = 1..10;
expand(3);

execute <create new input random enum stream "action">; # this is a random generator creating enums of type "action"
let variable my action dice index = <the created stream index>;

let variable the read from stream source stream index = <my action dice index>;

let variable my_function (X:my_range) = value code { execute <read from stream "action">; execute <print <the read from stream result "action">>; };
 
execute <my_function (X:my_range)>;
