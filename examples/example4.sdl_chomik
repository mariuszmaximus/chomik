#!/usr/local/bin/sdl_chomik
###################################################################################################
# 
# This is a simple RPG game written in sdl_chomik
#

###################################################################################################
# 
# The types
#
type direction = { north, east, south, west };

type game_mode_type = { initial, game, hero_status, in_a_building };

type huts_range = 1..3,         # there are 3 huts in the game
    information_range=1..5;     # each person can remember up to 5 informations
    
type person = { I, Gotrek, Gerrudir, Gwaigilion };
type item = { sword, axe, bow }; 
type place = { outside, Gotreks_hut, Gerrudirs_hut, Gwaigilions_hut };
type action = { do_nothing, talk_with_(X:person), end_conversation, tell_(X:person)_(Y:information), ask_(X:person)_whether_(Y:information), 
                go_to_(X:place), ask_(X:person)_to_(Y:action), ask_(X:person)_question_(Y:question) };
type information = { nothing, (X:person)_is_in_(Y:place), (X:person)_can_see_(Y:person), (X:person)_has_(Y:item), (X:person)_can_see_(Y:information)_is_(Z:boolean),
                    (X:person)_has_heard_(Y:information), (X:person)_has_asked_(Y:person)_to_(Z:action), (X:person)_thinks_(Y:information)_is_(Z:boolean),
                    (X:person)_has_asked_(Y:person)_a_question_(Z:question)};                    
type question = { where_is_(X:person), can_(X:person)_see_(Y:person), does_(X:person)_have_(Y:item), what_items_has_(X:person), can_(X:person)_see_(Y:information)_is_(Z:boolean),
                    has_(X:person)_heard_(Y:information), has_(X:person)_asked_(Y:person)_to_(Z:action) };
expand(3);


variable (X:person) thinks (Y:information_range):information;   # each person can remember several informations

# "input variables"
variable (X:person) can see (Y:person):boolean;
variable where is (X:person):place;
variable (X:person) is in a conversation:boolean;   # for each person there is a boolean flag - whether it is in a conversation



# game mode - it controls how the keys are interpreted and what the sdl loop body is.
variable game mode: game_mode_type;

let variable game mode = value game_mode_type initial;


###################################################################################################
# 
# Create the random number/random enum streams.
#

execute <create new input random number stream "integer" 1 5>;  # to choose randomly an information index
let variable my information index generator index = <the created stream index>;

execute <create new input random number stream "integer" 100 200>;
let variable my time generator index = <the created stream index>;

execute <create new input random enum stream "action">; # this is a random generator creating enums of type "action"
let variable my action dice index = <the created stream index>;

execute <create new input random enum stream "direction">; # this is a random generator creating enums of type "direction"
let variable my direction dice index = <the created stream index>;

###################################################################################################
# 
# Read the images
#
execute <create new image "../image/title_screen.png">;
variable title screen image index: integer;
let variable title screen image index = <the created image index>;

execute <create new image "../image/floor.png">;
variable floor image index: integer;
let variable floor image index = <the created image index>;

execute <create new image "../image/paper.png">;
variable paper image index: integer;
let variable paper image index = <the created image index>;

execute <create new image "../image/chomik.png">;
variable chomik image index: integer;
let variable chomik image index = <the created image index>;

execute <create new image "../image/building.png">;
variable hut image index: integer;
let variable hut image index = <the created image index>;

execute <create new image "../image/blue_monkey_figure.png">;
variable blue monkey image index: integer;
let variable blue monkey image index = <the created image index>;

execute <create new image "../image/red_monkey_figure.png">;
variable red monkey image index: integer;
let variable red monkey image index = <the created image index>;

execute <create new image "../image/green_monkey_figure.png">;
variable green monkey image index: integer;
let variable green monkey image index = <the created image index>;

execute <create new image "../image/yellow_monkey_figure.png">;
variable yellow monkey image index: integer;
let variable yellow monkey image index = <the created image index>;

###################################################################################################
# 
# Read the fonts
#
execute <create new font "../font/PlayfairDisplay-Regular.ttf" 24>;
variable my regular font index:integer;
let variable my regular font index = <the created font index>;

execute <create new font "../font/PlayfairDisplay-BoldItalic.ttf" 64>;
variable my big font index:integer;
let variable my big font index = <the created font index>;


###################################################################################################
# 
# The initialization
#

variable npc thinking time (X:person):integer;


variable hero dx:integer, hero dy:integer, hero x:integer, hero y:integer;
variable (X:person) dx:integer, (X:person) dy:integer, (X:person) x:integer, (X:person) y:integer;
variable where is hero:place, hero is in a conversation:boolean;

variable initialize the game:code;
let variable initialize the game=value code
{
    let variable hero dx = value integer 0;
    let variable hero dy = value integer 0;
    let variable hero x = value integer 400;
    let variable hero y = value integer 300;
    let variable hero is in a conversation=value boolean false;
    let variable where is hero = value place outside;
    
    
    let variable npc thinking time (X:person)=value integer 0;    
    let variable Gotrek x = value integer 50;
    let variable Gotrek y = value integer 50;
    let variable Gerrudir x = value integer 700;
    let variable Gerrudir y = value integer 50;
    let variable Gwaigilion x = value integer 700;
    let variable Gwaigilion y = value integer 400;
    
    let variable (X:person) dx = value integer 0;
    let variable (X:person) dy = value integer 0;    
    let variable (X:person) thinks (Y:information_range)=value information nothing;     # clear the memory of the npcs
    let variable (X:person) is in a conversation=value boolean false;
    let variable where is (X:person) = value place outside;
};


###################################################################################################
# 
# Learning/noticing new informations for the NPCs.
#

variable current information index:information_range;
variable current npc:person, current question:question;
variable current information:information;

variable learn new information:code;    # this code is used to remember new informations
let variable learn new information=value code
{
    # choose randomly an information index
    let variable the read from stream source stream index = <my information index generator index>;
    execute <read from stream "integer">;
    let variable current information index=<the read from stream result "integer">;

    # store the new information in it
    let variable <current npc> thinks <current information index>=<current information>;
};



###################################################################################################
# 
# Key handling.
#

variable enter building (X:huts_range):code;
let variable enter building (X:huts_range)=value code
{
    let variable game mode = value game_mode_type in_a_building;
};


variable return pressed depending on game mode (X:game_mode_type): code;
let variable return pressed depending on game mode initial=value code
{
    let variable game mode = value game_mode_type game;    
    let variable on key up = value code { let variable hero dy = value integer -10; };
    let variable on key down = value code { let variable hero dy = value integer 10; };
    let variable on key left = value code { let variable hero dx = value integer -10; };
    let variable on key right = value code { let variable hero dx = value integer 10; };
    execute <initialize the game>;
};

variable space pressed depending on game mode (X:game_mode_type):code;
let variable space pressed depending on game mode game=value code
{
    execute <enter building <active hut index>>;
};
let variable space pressed depending on game mode in_a_building=value code
{
    let variable game mode = value game_mode_type game;
};


variable escape pressed depending on game mode (X:game_mode_type): code;
let variable escape pressed depending on game mode game=value code
{
    let variable game mode = value game_mode_type initial;    
    let variable on key up = value code {};
    let variable on key down = value code {};
    let variable on key left = value code {};
    let variable on key right = value code {};
};
let variable escape pressed depending on game mode in_a_building=value code
{
    let variable game mode = value game_mode_type initial;    
    let variable on key up = value code {};
    let variable on key down = value code {};
    let variable on key left = value code {};
    let variable on key right = value code {};
};

variable backspace pressed depending on game mode (X:game_mode_type): code;
let variable backspace pressed depending on game mode game=value code
{
    let variable game mode = value game_mode_type hero_status;
};

let variable backspace pressed depending on game mode hero_status=value code
{
    let variable game mode = value game_mode_type game;
};

let variable on key space = value code
{
    execute <space pressed depending on game mode <game mode>>;
};

let variable on key return = value code
{
    execute <return pressed depending on game mode <game mode>>;
};

let variable on key escape = value code
{
    execute <escape pressed depending on game mode <game mode>>;
};

let variable on key backspace = value code
{
    execute <backspace pressed depending on game mode <game mode>>;
};

###################################################################################################
# 
# The title screen
#

variable loop body depending on game mode (X:game_mode_type): code;
let variable loop body depending on game mode initial=value code
{
    execute <show image <title screen image index> 0 0>;     
    execute <show image <chomik image index> 0 0>;    
    execute <show text <my big font index> "The Four Monkeys" 100 0>;    
    execute <show text <my regular font index> "by Pawel Biernacki" 100 400>;
    execute <show text <my regular font index> "<pawel.f.biernacki@gmail.com>" 100 432>;
    execute <show text <my regular font index> "press Return to play" 100 564>;    
};


###################################################################################################
# 
# The huts - different places in the game.
#

variable hut (X:huts_range) x:integer;
variable hut (X:huts_range) y:integer;
variable hut (X:huts_range) name:string;
variable hut (X:huts_range) id:place;

let variable hut 1 x=value integer 120;
let variable hut 1 y=value integer 200;
let variable hut 1 name=value string "Gotrek's hut";
let variable hut 1 id = value place Gotreks_hut;

let variable hut 2 x=value integer 350;
let variable hut 2 y=value integer 100;
let variable hut 2 name=value string "Gerrudir's hut";
let variable hut 2 id = value place Gerrudirs_hut;

let variable hut 3 x=value integer 600;
let variable hut 3 y=value integer 400;
let variable hut 3 name=value string "Gwaigilion's hut";
let variable hut 3 id = value place Gwaigilions_hut;

variable show_hut (X:huts_range):code;
let variable show_hut (X:huts_range) = value code
{
    execute <show image <hut image index> <hut (X:huts_range) x> <hut (X:huts_range) y>>;
    execute <show text <my regular font index> <hut (X:huts_range) name> <hut (X:huts_range) x> <hut (X:huts_range) y>>;
};

variable show_all_huts:code;
let variable show_all_huts=value code
{
    execute <show_hut (X:huts_range)>;
};


###################################################################################################
# 
# Slowing down the hero (the horizontal speed - dx and vertical speed dy are getting closer to 0)
#

variable slow_down_hero_x_on_comparison (X:compare_result):code, slow_down_hero_y_on_comparison (X:compare_result):code;
let variable slow_down_hero_x_on_comparison greater=value code
{
    execute <substract "integer" <hero dx> 1>;
    let variable hero dx=<the substract result "integer">;
};

let variable slow_down_hero_x_on_comparison lower=value code
{
    execute <add "integer" <hero dx> 1>;
    let variable hero dx=<the add result "integer">;
};

let variable slow_down_hero_y_on_comparison greater=value code
{
    execute <substract "integer" <hero dy> 1>;
    let variable hero dy=<the substract result "integer">;
};

let variable slow_down_hero_y_on_comparison lower=value code
{
    execute <add "integer" <hero dy> 1>;
    let variable hero dy=<the add result "integer">;
};

###################################################################################################
# 
# Don't allow the hero to move beyond the screen
#

variable reset_hero_x_left_on_comparison (X:compare_result):code, 
        reset_hero_x_right_on_comparison (X:compare_result):code, 
        reset_hero_y_down_on_comparison (X:compare_result):code,
        reset_hero_y_up_on_comparison (X:compare_result):code;
        
let variable reset_hero_x_left_on_comparison lower=value code { let variable hero x=value integer 0; };
let variable reset_hero_x_right_on_comparison greater=value code { let variable hero x=value integer 750; };
let variable reset_hero_y_up_on_comparison lower=value code { let variable hero y=value integer 0; };
let variable reset_hero_y_down_on_comparison greater=value code { let variable hero y=value integer 500; };


###################################################################################################
# 
# Moving the hero
#

variable move hero:code;
let variable move hero=value code
{
    execute <add "integer" <hero x> <hero dx>>;
    let variable hero x=<the add result "integer">;
    execute <compare "integer" <hero dx> 0>;
    execute <slow_down_hero_x_on_comparison <the compare result>>;

    execute <add "integer" <hero y> <hero dy>>;
    let variable hero y=<the add result "integer">;
    execute <compare "integer" <hero dy> 0>;
    execute <slow_down_hero_y_on_comparison <the compare result>>;        
    
    # don't allow moving beyond the screen
    execute <compare "integer" <hero x> 0>;
    execute <reset_hero_x_left_on_comparison <the compare result>>;
    
    execute <compare "integer" <hero x> 750>;
    execute <reset_hero_x_right_on_comparison <the compare result>>;

    execute <compare "integer" <hero y> 0>;
    execute <reset_hero_y_up_on_comparison <the compare result>>;
    
    execute <compare "integer" <hero y> 500>;
    execute <reset_hero_y_down_on_comparison <the compare result>>;    
};


###################################################################################################
# 
# Is the hero near a hut?
#


variable distance x: integer, distance y: integer;

variable active hut index:integer;  # it is 0 when no hut is active


variable show extra text on comparison (X:compare_result):code;
let variable show extra text on comparison lower=value code
{
    execute <show text <my regular font index> "press Space to enter a building" 100 32>;
    let variable active hut index=<current hut>;
};


variable replace distance x by its negation if (X:compare_result):code;
let variable replace distance x by its negation if lower=value code
{
    execute <substract "integer" 0 <distance x>>;
    let variable distance x=<the substract result "integer">;
};

variable replace distance y by its negation if (X:compare_result):code;
let variable replace distance y by its negation if lower=value code
{
    execute <substract "integer" 0 <distance y>>;   # we don't have unary minus ;(
    let variable distance y=<the substract result "integer">;
};

variable check whether hero is near a building:code;
let variable check whether hero is near a building=value code
{
    execute <substract "integer" <hero x> <hut <current hut> x>>;
    let variable distance x=<the substract result "integer">;
    execute <compare "integer" <distance x> 0>;
    execute <replace distance x by its negation if <the compare result>>;
    
    execute <substract "integer" <hero y> <hut <current hut> y>>;
    let variable distance y=<the substract result "integer">;
    execute <compare "integer" <distance y> 0>;
    execute <replace distance y by its negation if <the compare result>>;
    
    execute <add "integer" <distance x> <distance y>>;
    #execute <print for <current hut> "the distance is" <the add result "integer">>;
        
    execute <compare "integer" <the add result "integer"> 100>;
    execute <show extra text on comparison <the compare result>>;
};

variable show extra text when near a building (X:huts_range):code;
let variable show extra text when near a building (X:huts_range)=value code
{    
    let variable current hut=value integer [(X:huts_range)];
    execute <check whether hero is near a building>;
};


###################################################################################################
# 
# The ideas of the NPCs
#

variable (X:person) wants to:action;
let variable (X:person) wants to=value action do_nothing;



variable the idea is reasonable:boolean;



variable it is not reasonable to talk to oneself (X:compare_result):code;
let variable it is not reasonable to talk to oneself equal=value code
{
    execute <print "IT IS NOT REASONABLE TO TALK TO ONESELF">;
    let variable the idea is reasonable=value boolean false;
    let variable <current npc> wants to=value action do_nothing;    
};

variable it is not reasonable to tell oneself anything (X:compare_result):code;
let variable it is not reasonable to tell oneself anything equal=value code
{
    execute <print "IT IS NOT REASONABLE TO TELL ONESELF ANYTHING">;
    let variable the idea is reasonable=value boolean false;
    let variable <current npc> wants to=value action do_nothing;
};

variable it is not reasonable to ask oneself whether anything (X:compare_result):code;
let variable it is not reasonable to ask oneself whether anything equal=value code
{
    execute <print "IT IS NOT REASONABLE TO ASK ONESELF WHETHER ANYTHING">;
    let variable the idea is reasonable=value boolean false;
    let variable <current npc> wants to=value action do_nothing;
};
variable it is not reasonable to ask oneself to do anything (X:compare_result):code;
let variable it is not reasonable to ask oneself to do anything equal=value code
{
    execute <print "IT IS NOT REASONABLE TO ASK ONESELF TO DO ANYTHING">;
    let variable the idea is reasonable=value boolean false;
    let variable <current npc> wants to=value action do_nothing;
};
variable it is not reasonable to ask oneself any question (X:compare_result):code;
let variable it is not reasonable to ask oneself any question equal=value code
{
    execute <print "IT IS NOT REASONABLE TO ASK ONESELF ANY QUESTION">;
    let variable the idea is reasonable=value boolean false;
    let variable <current npc> wants to=value action do_nothing;
};

variable some strange action:action, current action:action, current information:information;

variable go through all informations (X:information):code;
let variable go through all informations (X:information)=value code
{
    let variable current information = value information [(X:information)];
    let variable some strange action = value action tell_<current npc>_<current information>;    
    #execute <print "checking" <current information> ", the strange action would be" <some strange action>>;
    execute <compare "action" <<current npc> wants to> <some strange action>>;
    #execute <print "compare result=" <the compare result>>;
    execute <it is not reasonable to tell oneself anything <the compare result>>;

    let variable some strange action = value action ask_<current npc>_whether_<current information>;
    execute <compare "action" <<current npc> wants to> <some strange action>>;
    #execute <print "compare result=" <the compare result>>;
    execute <it is not reasonable to ask oneself whether anything <the compare result>>;    
};

variable go through all actions (X:action):code;
let variable go through all actions (X:action)=value code
{
    let variable current action = value action [(X:action)];
    let variable some strange action = value action ask_<current npc>_to_<current action>;
    execute <compare "action" <<current npc> wants to> <some strange action>>;
    #execute <print "compare result=" <the compare result>>;
    execute <it is not reasonable to ask oneself to do anything <the compare result>>;    
};
variable go through all questions (X:question):code;
let variable go through all questions (X:question)=value code
{
    let variable current question = value question [(X:question)];
    let variable some strange action = value action ask_<current npc>_question_<current question>;    
    execute <compare "action" <<current npc> wants to> <some strange action>>;
    execute <it is not reasonable to ask oneself any question <the compare result>>;    
};

variable go through all crazy ideas :code;
let variable go through all crazy ideas =value code
{
    # one cannot talk to himself!
    let variable some strange action = value action talk_with_<current npc>;
    #execute <print "checking" <some strange action>>;
    execute <compare "action" <<current npc> wants to> <some strange action>>;
    #execute <print "compare result=" <the compare result>>;
    execute <it is not reasonable to talk to oneself <the compare result>>;
        
    execute <go through all informations (Y:information)>;    
    execute <go through all actions (Y:action)>;
    execute <go through all questions (Y:question)>;
};

###################################################################################################
# 
# Moving the NPCs
#

variable move npc in the direction (X:direction):code;
let variable move npc in the direction north=value code
{
    let variable <current npc> dy=value integer -10;
};
let variable move npc in the direction east=value code
{
    let variable <current npc> dx=value integer 10;
};
let variable move npc in the direction south=value code
{
    let variable <current npc> dy=value integer 10;
};
let variable move npc in the direction west=value code
{
    let variable <current npc> dx=value integer -10;
};


variable if the idea is not reasonable then shorten the thinking time (X:boolean):code;
let variable if the idea is not reasonable then shorten the thinking time false=value code
{
    let variable npc thinking time <current npc>=value integer 50;
};

variable current direction:direction;

let variable if the idea is not reasonable then shorten the thinking time true=value code
{
    execute <print "an excellent idea!">;
    # now make a plan - how to achieve your goal, when you want to talk with X go to where he might be
    
        
    # get random direction
    let variable the read from stream source stream index = <my direction dice index>;
    execute <read from stream "direction">;
    let variable current direction=<the read from stream result "direction">;
    
    # move the npc
    execute <move npc in the direction <current direction>>;    
};




variable check whether the new idea is reasonable:code;
let variable check whether the new idea is reasonable=value code
{
    execute <print <current npc> "checks whether his idea is reasonable:" <<current npc> wants to>>;
    
    let variable the idea is reasonable=value boolean true;
    execute <go through all crazy ideas>;    
    
    execute <if the idea is not reasonable then shorten the thinking time <the idea is reasonable>>;
};

###################################################################################################
# 
# The NPCs get a new idea.
#

variable npc gets new idea on comparison (X:compare_result):code;
let variable npc gets new idea on comparison equal=value code
{
    let variable the read from stream source stream index = <my action dice index>;
    execute <read from stream "action">;
    let variable <current npc> wants to=<the read from stream result "action">;
    #execute <print <current npc> "wants to" <<current npc> wants to>>;    
    
    let variable the read from stream source stream index = <my time generator index>;
    execute <read from stream "integer">;    
    let variable npc thinking time <current npc>=<the read from stream result "integer">;
    
    #execute <print "new npc thinking time is" <npc thinking time <current npc>> "for" <current npc>>;
    
    # check whether the new idea is reasonable, 
    execute <check whether the new idea is reasonable>;    
};


variable notice all informations:code;
let variable notice all informations=value code
{
    # calculate the distance from all buildings
    # choose the smallest one, if it is less then the threshold:
    # check whether the other characters are in the same place -
    # set the variables (X:person)_can_see_(Y:person)
};


###################################################################################################
# 
# Slowing down the NPCs
#

variable slow_down_npc_x_on_comparison (X:compare_result):code, slow_down_npc_y_on_comparison (X:compare_result):code;
let variable slow_down_npc_x_on_comparison greater=value code
{
    execute <substract "integer" <<current npc> dx> 1>;
    let variable <current npc> dx=<the substract result "integer">;
};

let variable slow_down_npc_x_on_comparison lower=value code
{
    execute <add "integer" <<current npc> dx> 1>;
    let variable <current npc> dx=<the add result "integer">;
};
let variable slow_down_npc_y_on_comparison greater=value code
{
    execute <substract "integer" <<current npc> dy> 1>;
    let variable <current npc> dy=<the substract result "integer">;
};

let variable slow_down_npc_y_on_comparison lower=value code
{
    execute <add "integer" <<current npc> dy> 1>;
    let variable <current npc> dy=<the add result "integer">;
};

###################################################################################################
# 
# Don't allow the NPCs to go beyond the screen
#

variable reset_npc_x_left_on_comparison (X:compare_result):code, 
        reset_npc_x_right_on_comparison (X:compare_result):code, 
        reset_npc_y_down_on_comparison (X:compare_result):code,
        reset_npc_y_up_on_comparison (X:compare_result):code;
        
let variable reset_npc_x_left_on_comparison lower=value code { let variable <current npc> x=value integer 0; };
let variable reset_npc_x_right_on_comparison greater=value code { let variable <current npc> x=value integer 750; };
let variable reset_npc_y_up_on_comparison lower=value code { let variable <current npc> y=value integer 0; };
let variable reset_npc_y_down_on_comparison greater=value code { let variable <current npc> y=value integer 500; };


###################################################################################################
# 
# Moving the NPCs
#


variable move npc:code;
let variable move npc=value code
{
    execute <add "integer" <<current npc> x> <<current npc> dx>>;
    let variable <current npc> x=<the add result "integer">;
    execute <compare "integer" <<current npc> dx> 0>;
    execute <slow_down_npc_x_on_comparison <the compare result>>;

    execute <add "integer" <<current npc> y> <<current npc> dy>>;
    let variable <current npc> y=<the add result "integer">;
    execute <compare "integer" <<current npc> dy> 0>;
    execute <slow_down_npc_y_on_comparison <the compare result>>;        
    
    # don't allow moving beyond the screen
    execute <compare "integer" <<current npc> x> 0>;
    execute <reset_npc_x_left_on_comparison <the compare result>>;
    
    execute <compare "integer" <<current npc> x> 750>;
    execute <reset_npc_x_right_on_comparison <the compare result>>;

    execute <compare "integer" <<current npc> y> 0>;
    execute <reset_npc_y_up_on_comparison <the compare result>>;
    
    execute <compare "integer" <<current npc> y> 500>;
    execute <reset_npc_y_down_on_comparison <the compare result>>;    
};


variable move npc (X:person):code;
let variable move npc (X:person)=value code
{
    let variable current npc=value person[(X:person)];
    execute <move npc>;
};
let variable move npc I=value code {};  # "I" is not an NPC

variable npc is thinking (X:person):code;
let variable npc is thinking (X:person)=value code
{
    let variable current npc=value person[(X:person)];
    execute <compare "integer" <npc thinking time <current npc>> 0>;
    
    execute <notice all informations>;
    
    execute <npc gets new idea on comparison <the compare result>>;
    
    # decrease the npc's thinking time
    execute <substract "integer" <npc thinking time <current npc>> 1>;
    let variable npc thinking time <current npc>=<the substract result "integer">;    
        
};
let variable npc is thinking I=value code {};   # the hero does not think - it is controlled by the player

###################################################################################################
# 
# loop body depending on game mode
#


let variable loop body depending on game mode game=value code
{
    execute <show image <title screen image index> 0 0>;     
    execute <show_all_huts>;

    execute <show image <red monkey image index> <Gotrek x> <Gotrek y>>;
    execute <show image <yellow monkey image index> <Gerrudir x> <Gerrudir y>>;
    execute <show image <green monkey image index> <Gwaigilion x> <Gwaigilion y>>;        
        
    execute <show text <my regular font index> "Gotrek" <Gotrek x> <Gotrek y>>;
    execute <show text <my regular font index> "Gerrudir" <Gerrudir x> <Gerrudir y>>;
    execute <show text <my regular font index> "Gwaigilion" <Gwaigilion x> <Gwaigilion y>>;
    
    execute <show image <blue monkey image index> <hero x> <hero y>>;    
    
    execute <show text <my regular font index> "press Escape to exit" 100 0>;        
    
    let variable active hut index=value integer 0;    
    execute <show extra text when near a building (X:huts_range)>;    
    execute <show text <my regular font index> "press Backspace to see your status" 100 64>;
    execute <show image <chomik image index> 0 0>;    
    execute <move hero>;
    execute <npc is thinking (X:person)>;
    execute <move npc (X:person)>;
};


let variable loop body depending on game mode in_a_building=value code
{
    execute <show image <floor image index> 0 0>;     
    execute <show image <blue monkey image index> 400 300>;
    
    execute <show text <my regular font index> "press Escape to exit" 100 16>;    
    execute <show text <my regular font index> "press Space to return" 100 48>;    
};


let variable loop body depending on game mode hero_status=value code
{
    execute <show image <paper image index> 0 0>;     
    execute <show image <chomik image index> 0 0>;        
    execute <show text <my regular font index> "Your status" 100 16>;
    execute <show text <my regular font index> "press Backspace to exit" 100 48>;
};

let variable sdl loop body = value code 
{ 
    execute <loop body depending on game mode <game mode>>;
};

execute <sdl loop>;
 

